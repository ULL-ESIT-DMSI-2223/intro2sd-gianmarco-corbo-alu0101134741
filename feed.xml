<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/" rel="alternate" type="text/html" /><updated>2022-12-28T21:46:26+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/feed.xml</id><title type="html">Introducción a Desarrollo y mantenimiento de Sistemas</title><subtitle>En esta página se practicarán varios ejercicios para la creación de páginas web y se escribirá un informe en uno de los posts.</subtitle><author><name>Gianmarco Corbo</name></author><entry><title type="html">Post: Future Date</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/post/post-future-date/" rel="alternate" type="text/html" title="Post: Future Date" /><published>9999-12-31T00:00:00+00:00</published><updated>9999-12-31T00:00:00+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/post/post-future-date</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/post/post-future-date/">&lt;p&gt;This post lives in the future and is dated Fri Dec 31 00:00:00 9999. When building Jekyll with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--future&lt;/code&gt; flag it should appear.&lt;/p&gt;</content><author><name>Gianmarco Corbo</name></author><category term="Post" /><summary type="html">This post lives in the future and is dated Fri Dec 31 00:00:00 9999. When building Jekyll with the --future flag it should appear.</summary></entry><entry><title type="html">Informe practica implementación search</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search/" rel="alternate" type="text/html" title="Informe practica implementación search" /><published>2022-12-25T00:00:00+00:00</published><updated>2022-12-25T00:00:00+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;

  &lt;h1 align=&quot;center&quot;&gt;Informe práctica implementación search &lt;/h1&gt;

&lt;/p&gt;

&lt;!-- TABLE OF CONTENTS --&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search/#1-se-ha-creado-una-rama-intro2sd-para-se%C3%B1alar-el-punto-de-entrega-de-la-anterior-pr%C3%A1ctica&quot;&gt;Se ha creado una rama intro2sd para señalar el punto de entrega de la anterior práctica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search/#2-creaci%C3%B3n-del-archivo-searchjson&quot;&gt;Creación del archivo search.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search/#3-creaci%C3%B3n-del-archivo-searchjs&quot;&gt;Creación del archivo search.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search/#4-creaci%C3%B3n-del-archivo-searchmd&quot;&gt;Creación del archivo search.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/informe-practica-search/#5-resumen-capitulo-2-del-libro-developing-information-systems-editado-by-james-cadle&quot;&gt;Resumen capitulo 2 del libro Developing Information Systems, editado by James Cadle&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-se-ha-creado-una-rama-intro2sd-para-señalar-el-punto-de-entrega-de-la-anterior-práctica&quot;&gt;1. Se ha creado una rama intro2sd para señalar el punto de entrega de la anterior práctica&lt;/h2&gt;

&lt;p&gt;Al comienzo de la práctica se ha creado una rama intro2sd para señalar el punto de entrega de la anterior práctica mientras que para esta práctica seguiremos usando la rama main. &amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/ramaNueva.png&quot; alt=&quot;ramaNueva&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-creación-del-archivo-searchjson&quot;&gt;2. Creación del archivo search.json&lt;/h2&gt;

&lt;p&gt;Creamos tres ficheros: search.js, search.json y search.md. El primero de ellos es el que se encarga de la lógica de la búsqueda, el segundo de generar el fichero JSON y el tercero de mostrar el resultado de la búsqueda. &amp;lt;/br&amp;gt;
En el fichero &lt;strong&gt;search.json&lt;/strong&gt; lo que hacemos es recorrer todas las colecciones del sitio y todas las páginas html que no sean de colección y que tengan título. &lt;br /&gt;
Para cada una de ellas, creamos un objeto JSON con el título, el resumen, el contenido y la URL. Al final, todo el contenido se almacena en una variable llamada json que se imprime en la página.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/searchJson.png&quot; alt=&quot;searchJson&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-creación-del-archivo-searchjs&quot;&gt;3. Creación del archivo search.js&lt;/h2&gt;

&lt;p&gt;En el fichero &lt;strong&gt;search.js&lt;/strong&gt; lo que hacemos es crear una clase que se encargará de buscar en el JSON. Para ello, necesitamos crear un objeto con los parámetros que necesitamos para la búsqueda. &lt;br /&gt;
En este caso, el JSON que hemos generado, el campo de búsqueda y el contenedor donde se mostrarán los resultados. También necesitamos la URL del sitio para poder generar los enlaces a los resultados. &lt;br /&gt;
Los parametros necesarios se les pasarán al constructor de la clase a través de un objeto. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/searchJs1.png&quot; alt=&quot;searchJs1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/searchJs2.png&quot; alt=&quot;searchJs2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La función &lt;strong&gt;fetchedData()&lt;/strong&gt; se encarga de obtener los datos de la busqueda. Para ello, usamos fetch para obtener los datos y los convertimos a JSON. &lt;br /&gt;
Después, la función &lt;strong&gt;findResults()&lt;/strong&gt; se encarga de buscar los resultados que coincidan con el valor del campo de búsqueda. Para ello, necesitamos crear una expresión regular con el valor del campo de búsqueda y filtrar los resultados que coincidan con el título o el contenido. &lt;br /&gt;
&lt;strong&gt;displayResults()&lt;/strong&gt; se encarga de mostrar los resultados de la búsqueda. Para ello, primero recoge los resultados de la función &lt;strong&gt;findResults()&lt;/strong&gt; y genera un HTML con los resultados. En caso de que no haya resultados o el campo de búsqueda esté vacío, muestra un mensaje de error. Finalmente, muestra el HTML generado en el contenedor de resultados. &lt;br /&gt;
En la funcion &lt;strong&gt;init()&lt;/strong&gt; se crea un objeto URL para obtener el parámetro de búsqueda en la URL actual. Si existe, se establece el valor del campo de búsqueda en el valor del parámetro de búsqueda. &lt;br /&gt; Luego, se llama a la función &lt;strong&gt;displayResults()&lt;/strong&gt; para mostrar los resultados de la búsqueda. Si no hay resultados, se muestra un mensaje de error. &lt;br /&gt;
El evento keyup se agrega al campo de búsqueda. Cuando el usuario presiona una tecla, se llama a la función displayResults() para actualizar los resultados de la búsqueda. Luego, se establece el parámetro de búsqueda en el campo de búsqueda y se actualiza la URL. &lt;br /&gt;
A su vez agregamos también el evento keypress al campo de búsqueda, así que cuando el usuario presione Enter, se evita el comportamiento predeterminado del navegador, que es recargar la página.&lt;/p&gt;

&lt;h2 id=&quot;4-creación-del-archivo-searchmd&quot;&gt;4. Creación del archivo search.md&lt;/h2&gt;

&lt;p&gt;En el fichero &lt;strong&gt;search.md&lt;/strong&gt; lo que hacemos es crear una página que se encargará de mostrar el resultado de la búsqueda. Para ello, creamos un formulario con un campo de búsqueda y un contenedor donde se mostrarán los resultados. &lt;br /&gt;
En el formulario, creamos un evento que se encargará de llamar a la función init() de la clase JekyllSearch. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/searchMd.png&quot; alt=&quot;searchMd&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-resumen-capitulo-2-del-libro-developing-information-systems-editado-by-james-cadle&quot;&gt;5. Resumen capitulo 2 del libro Developing Information Systems, editado by James Cadle&lt;/h2&gt;

&lt;p&gt;El ciclo de desarrollo de sistemas, es el proceso de creación o modificación de los sistemas, modelos y metodologías que la gente usa para desarrollar estos sistemas de software, ya sea hardware o software. &lt;br /&gt;
&lt;br /&gt;
Las fases que lo componen son: &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Estudio de viabilidad&lt;/strong&gt;: se analiza la viabilidad del proyecto comprobando si el ROI es lo suficientemente bueno como para empezar el proyecto en sí. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Análisis de requisitos&lt;/strong&gt;: se analizan los requisitos del sistema, se identifican los problemas y se establecen los objetivos que habrá que cumplir. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Diseño&lt;/strong&gt;: se diseña el sistema considerando varias soluciones para cumplir los requisitos especificados. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Desarrollo&lt;/strong&gt;: se empieza a construir el sistema, se desarrolla el código y se crean de una a una las distintas funcionalidades. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pruebas&lt;/strong&gt;: se prueban las funcionalidades del sistema para comprobar que cumplen los requisitos especificados. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implantación&lt;/strong&gt;: se despliega el sistema en el entorno de producción. &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;los-elementos-que-componen-el-ciclo-de-desarrollo-de-sistemas-son-&quot;&gt;Los elementos que componen el ciclo de desarrollo de sistemas son: &lt;br /&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Contexto&lt;/strong&gt;: es el entorno en el que se desarrolla el proyecto, que es necesario comprender en su totalidad para saber como puede afectar al desarrollo de nuestro sistema. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ciclo de vida&lt;/strong&gt;: es el proceso de desarrollo del sistema, que se divide en fases. Puede ser tanto lineal como iterativo. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Proceso&lt;/strong&gt;: es el conjunto de actividades que se llevan a cabo en cada fase del ciclo de vida para generar un determinado output. &lt;br /&gt;
-&lt;strong&gt;Roles&lt;/strong&gt;: son los distintos papeles que desempeñan las personas que participan en el proyecto. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Entregables&lt;/strong&gt;: son los productos que se generan en cada fase del ciclo de vida. Pueden ser componentes software, hardware, documentación, diseños… &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Técnicas&lt;/strong&gt;: son las herramientas que se utilizan para llevar a cabo las actividades del proceso, como por ejemplo el Desarrollo dirigido por pruebas (TDD) o los diagramas UML. Es necesario saber que tipo de herramientas son más adecuadas para la creación de nuestro sistema, para así no entorpecer su desarrollo. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lo largo de los años, se han ido desarrollando distintas metodologías para el desarrollo de sistemas, cada una con sus ventajas e inconvenientes. &lt;br /&gt;
Aún así no existe una metodología que sea la mejor para todos los proyectos, ya que cada proyecto es diferente y requiere una metodología diferente, por lo que seguir los pasos de un determinado CDS a raja tabla no es siempre la clave para un mejor proyecto. &lt;br /&gt;
Se podría decir que normalmente se asocian dos enfoques al ciclo de desarrollo de sistemas (lineal o evolutivo), como también 5 tipos de metodologías (en cascada, metodo-V, espiral, iterativo e incremental). &lt;br /&gt;
&lt;br /&gt;
Vamos a comparar el enfoque lineal con el enfoque evolutivo: &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enfoque lineal&lt;/strong&gt;: se desarrolla el sistema en una única fase, en la que se llevan a cabo todas las actividades del proceso. &lt;br /&gt;
Esto conlleva ciertas ventajas, como por ejemplo que es más fácil de gestionar, ya que se puede controlar mejor el proyecto o también que es más fácil de planificar, ya que se sabe desde el principio que actividades se van a llevar a cabo. &lt;br /&gt;
También tiene ciertas desventajas, como por ejemplo que no se puede comprobar si el sistema cumple los requisitos hasta que no se ha terminado de desarrollar. &lt;br /&gt;
Además, en caso de que los requisitos cambien, se tendría que volver a empezar el proyecto practicamente desde cero. &lt;br /&gt;
Practicamente, es un enfoque más adecuado para proyectos pequeños o no muy complejos. &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enfoque evolutivo&lt;/strong&gt;: se desarrolla el sistema en varias fases, en las que se llevan a cabo las actividades del proceso. &lt;br /&gt;
Esto conlleva ciertas ventajas, como por ejemplo que se puede comprobar si el sistema cumple los requisitos a lo largo del desarrollo, por lo que se puede corregir cualquier error que se encuentre. &lt;br /&gt;
También involucra más al cliente, ya que se le puede mostrar el sistema en cada fase para que pueda dar su opinión. &lt;br /&gt;
También tiene ciertas desventajas, como por ejemplo que es más difícil de gestionar, ya que se puede perder el control del proyecto. &lt;br /&gt;
Además, los costes de desarrollo son mayores, ya que se llevan a cabo más actividades. &lt;br /&gt;
Como podemos ver, es un enfoque más adecuado para proyectos grandes, complejos o con cambios muy frecuentes. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;los-ciclos-de-vida-basados-en-el-enfoque-lineal-son-&quot;&gt;Los ciclos de vida basados en el enfoque lineal son: &lt;br /&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ciclo de vida en cascada&lt;/strong&gt;: en el ciclo de vida en cascada es necesario terminar una fase antes de empezar la siguiente. &lt;br /&gt;
En caso de que hay un problema en una fase, volvemos a empezar en la fase anterior para intentar corregirlo. &lt;br /&gt;
Se trata de un ciclo de vida muy simple, que se basa en la planificación de las actividades del proceso. &lt;br /&gt;
Es bueno para proyectos que sabemos que no van a cambiar mucho en cuanto a requisitos y a la solución que se va a emplear. &lt;br /&gt;
También hay que tener en cuenta que no hay una entrega con software funcional hasta que no se ha llegado a la implementación y que implementar cambios en el sistema es muy costoso. &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ciclo de vida en V&lt;/strong&gt;: en el ciclo de vida en V, se desarrolla el sistema en dos “lados” de una V, en las que se llevan a cabo las actividades del proceso. &lt;br /&gt;
El lado izquierdo de la V representa la descomposición de las necesidades, y la creación de las especificaciones del sistema. El lado derecho de la V representa la integración de las piezas y su verificación. V significa «Verificación y validación». Es muy similar al modelo de la cascada clásico ya que es muy rígido y contiene una gran cantidad de iteraciones, aunque se puede considerar como una extensión de dicho modelo, apuntando a mejorar el coste de tiempo al introducir cambios en el proyecto. &lt;br /&gt;
También existe una versión extendida del ciclo de vida en V, que se llama ciclo de vida en V extendido. &lt;br /&gt;
Tiene más enfoque en el desarrollo y pruebas de productos de calidad y también es fácil de escalar. &lt;br /&gt;
Hay mucho rigor en el proceso y testeo de los productos. &lt;br /&gt;
Esto no es muy adecuado para proyectos más simples, ya que el proceso es muy costoso. &lt;br /&gt;
También comparte la desventaja del modelo en cascada de que no hay una entrega con software funcional hasta que no se ha llegado a la implementación. &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ciclo de vida incremental&lt;/strong&gt;: a diferencia de los dos anteriores ciclos de vida, tras  haber diseñado y comprendido que es lo que se quiere hacer, se desarrolla el sistema pudiendose centar en la entrega de ciertas partes funcionales antes que otras. &lt;br /&gt;
Esto conlleva ciertas ventajas, como por ejemplo cumplir primero los requisitos con más prioridad y el poder entregar de forma paralela varios elementos funcionales, resolviendo así el inconveniente de las dos anteriores metodologías de no poder entregar software funcional hasta que no se ha llegado a la fase de implementación. &lt;br /&gt;
Es muy bueno para proyectos que requieren una salida rápida al mercado, ya que se pueden entregar partes funcionales del sistema antes de tiempo para ir luego incrementando sus funcionalidades a lo largo del tiempo. &lt;br /&gt;
De todas formas sigue requiriendo una gran cantidad de planificación y control, ya que se debe tener en cuenta que las partes funcionales que se van a entregar deben ser compatibles entre sí. &lt;br /&gt;
Gracias a este tipo de metodología, se puede ir adaptando el sistema a los cambios que se vayan produciendo en el proyecto, por lo que la gestión de riesgos es mucho más sencilla. &lt;br /&gt;
También facilita más la parte de testeos, ya que se pueden ir testeando los pequeños incrementos que se van aportando y con las entregas en paralelo se puede sacar el producto al mercado antes. &lt;br /&gt;
Aunque tiene ciertas ventajas, también tiene ciertas desventajas, como por ejemplo que el coste de desarrollo es mayor, ya que se llevan a cabo más actividades paralelas, además de ser algo complicado de gestionar. &lt;br /&gt;
También es necesario tener en cuenta que el sistema no estará completo hasta que no se hayan completado todas las fases. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los ciclos de vida basados en el enfoque evolutivo son: &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ciclo de vida iterativo&lt;/strong&gt;: en el ciclo de vida iterativo se divide cada “parte” del proyecto en pequeñas iteraciones, en las que se llevan a cabo las actividades del proceso, como por ejemplo los requisitos, el analisis, el desarrollo o el testeo. &lt;br /&gt;
Se podría decir que hay un mínimo de tres iteraciones necesarias y son:
· Investigación: en esta iteración se realiza una investigación sobre el proyecto y se realiza un análisis de riesgos. &lt;br /&gt;
· Refinamiento: en esta iteración se realiza un análisis más detallado del proyecto y se realizan los requisitos. &lt;br /&gt;
· Consolidación: en esta iteración se realiza la implementación y el testeo. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es bueno para proyectos con muchos cambios pero donde queremos controlar más los costes. &lt;br /&gt;
También promueve la colaboración entre el cliente y el equipo de desarrollo, ya que se realizan iteraciones cortas y se puede ir adaptando el sistema a los cambios que se vayan produciendo en el proyecto. &lt;br /&gt;
Tiene una gran cantidad de iteraciones, por lo que puede llegar a ser muy complejo a la hora de gestionar los diferentes equipos de desarrollo. &lt;br /&gt;
Y aunque los costes se pueden controlar más, seguirá siendo muy costoso. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ciclo de vida en espiral&lt;/strong&gt;: en el ciclo de vida en espiral combinamos el modelo de desarrollo iterativo con prototipos de testeo para entender y mejorar los requisitos del proyecto, por lo que no necesitas unos requisitos exactos ya establecidos antes de empezar. &lt;br /&gt;
Las fases del ciclo de vida en espiral son:
· Determinación de objetivos: en esta fase se establecen los objetivos del proyecto. &lt;br /&gt;
· Análisis y resolución de riesgos: en esta fase se analizan los riesgos del proyecto, que posteriormente irán evolucionando basandose en la retroalimentación proporcionada por las pruebas de los prototipos. &lt;br /&gt;
· Desarrollo y testeo: en esta fase se desarrollan prototipos para testear el proyecto. &lt;br /&gt;
· Planear la siguiente iteración. &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tiene más o menos las mismas ventajas que el ciclo de vida iterativo, con el añadido de una mejor gestión de riesgos. &lt;br /&gt;
Por otro lado los costes llegan a ser incluso mayores y hay más enfoque en la parte funcionante del sistema, por lo que no es muy adecuado para proyectos que requieran una gran cantidad de documentación. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Ágil es un término popular que ahora se da a los enfoques de desarrollo evolutivo tras el
Manifiesto Ágil” de 2001. 
El Manifiesto Ágil dio lugar a una nueva forma de pensar sobre el desarrollo de software
y surgió una nueva moda de métodos, procesos y ciclos de vida de desarrollo Agile.
Los ciclos de vida lineales, como el de cascada, el modelo en “V” y el incremental cedieron paso a enfoques más evolutivos como Scrum y el Proceso Ágil Unificado.
&lt;br /&gt;
Para tener éxito, muchos métodos ágiles dependen
del rigor y el cumplimiento de las normas. Aunque puede que no dependan de mucha documentación previa al desarrollo, sí dependen de procesos muy rigurosos.
&lt;br /&gt;
Debido a que los enfoques ágiles han nacido para equipos pequeños y altamente colaborativos, funcionan muy bien en ese tipo de entornos.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;enfoques-de-desarrollo&quot;&gt;Enfoques de desarrollo&lt;/h3&gt;

&lt;p&gt;Los enfoques de desarrollo son una forma de organizar el desarrollo de software. &lt;br /&gt;
Algunos de ellos son: &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SSADM&lt;/strong&gt; (Structured Systems Analysis and Design Methodology): El método SSADM implica la aplicación de una secuencia de tareas de análisis, documentación y diseño relacionados con las siguientes etapas: &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Etapa 0 - Estudio de viabilidad&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Etapa 1 - Investigación de la situación actual&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Etapa 2 - opciones del sistema de negocios&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Etapa 3 - Requisitos de especificación&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Etapa 4 - opciones del sistema Técnicas&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Etapa 5 - Diseño lógico&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Etapa 6 - Diseño físico&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;También las tres técnicas más importantes que se utilizan en SSADM son los siguientes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modelado de datos lógicos&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modelado de flujo de datos&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modelado Entidad Evento&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DSDM&lt;/strong&gt; (Dynamic Systems Development Method): 
El éxito de DSDM se debe a su convicción de que cualquier proyecto debe estar alineado con objetivos estratégicos claramente definidos y centrarse en la entrega temprana. El respaldo de esta filosofía con los ocho principios permite a los equipos mantener el enfoque y alcanzar los objetivos del proyecto. &lt;br /&gt;
Dichos principios son: &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Centrarse en la necesidad comercial &lt;br /&gt;
Entregar a tiempo &lt;br /&gt;
Colaborar &lt;br /&gt;
Nunca comprometer la calidad &lt;br /&gt;
Construir incrementalmente a partir de cimientos firmes &lt;br /&gt;
Desarrollar iterativamente &lt;br /&gt;
Comunicarse de forma continua y clara &lt;br /&gt;
Demostrar control &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scrum&lt;/strong&gt;: es un enfoque de desarrollo que se basa en la metodología ágil. &lt;br /&gt;
Es un proceso en el que se aplican de manera regular un conjunto de buenas prácticas para trabajar colaborativamente, en equipo y obtener el mejor resultado posible de proyectos. &lt;br /&gt;
Scrum es un marco de trabajo que define un conjunto de eventos, prácticas y roles,​ y que puede tomarse como conjunto base para definir el proceso de producción que usará un equipo de trabajo o dentro de un proyecto. &lt;br /&gt;
Los roles principales en Scrum son el Scrum Master, que procura facilitar la aplicación de Scrum y gestionar cambios, el Product Owner, que representa a los interesados, y el Team que ejecuta el desarrollo y demás elementos relacionados con él. &lt;br /&gt;
Durante cada sprint el equipo crea un incremento de software entregable. El conjunto de características que forma parte de cada sprint viene del Product Backlog, que es un conjunto de requisitos de alto nivel priorizados que definen el trabajo a realizar. Los elementos del Product Backlog que forman parte del sprint se determinan durante la reunión de Sprint Planning. Durante esta reunión, el Product Owner identifica los elementos del Product Backlog que quiere ver completados y los da a conocer al equipo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RUP&lt;/strong&gt; (Rational Unified Process): El proceso Rational Unified (RUP) es un proceso de ingeniería de software iterativo, evolutivo e incremental, construido sobre los cimientos del modelo espiral, que asigna y gestiona tareas y responsabilidades de forma disciplinada dentro de una organización desarrollo. &lt;br /&gt;
El proceso RUP se basa en cuatro fases: &lt;br /&gt;
· Inicio &lt;br /&gt;
· Elaboración &lt;br /&gt;
· Construcción &lt;br /&gt;
· Transición &lt;br /&gt;
Al ser un proceso de software, RUP es popular entre los equipos de desarrolladores y utiliza uso extensivo de UML (el Lenguaje Unificado de Modelado) para el Análisis y Diseño
orientado a objetos (OOA&amp;amp;D) y el modelado de casos. Esto puede resultar abrumador pero fomenta un diseño sólido y una buena trazabilidad. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lean Software Development&lt;/strong&gt;: Se trata de un conjunto de técnicas y herramientas que pueden aplicarse para eliminar el malgasto de dinero en la fabricación y mejorar así la productividad. Se basa en los siguientes principios son: &lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;· Centrarse en los clientes;
· Dinamizar a los trabajadores;
· Eliminar el despilfarro;
· Aprender rápido;
· Entregar rápido;
· Incorporar la calidad;
· Seguir mejorando;
· Optimizar el conjunto.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gianmarco Corbo</name></author><summary type="html">Informe práctica implementación search 1. Se ha creado una rama intro2sd para señalar el punto de entrega de la anterior práctica 2. Creación del archivo search.json 3. Creación del archivo search.js 4. Creación del archivo search.md 5. Resumen capitulo 2 del libro Developing Information Systems, editado by James Cadle 1. Se ha creado una rama intro2sd para señalar el punto de entrega de la anterior práctica Al comienzo de la práctica se ha creado una rama intro2sd para señalar el punto de entrega de la anterior práctica mientras que para esta práctica seguiremos usando la rama main. &amp;lt;/br&amp;gt; 2. Creación del archivo search.json Creamos tres ficheros: search.js, search.json y search.md. El primero de ellos es el que se encarga de la lógica de la búsqueda, el segundo de generar el fichero JSON y el tercero de mostrar el resultado de la búsqueda. &amp;lt;/br&amp;gt; En el fichero search.json lo que hacemos es recorrer todas las colecciones del sitio y todas las páginas html que no sean de colección y que tengan título. Para cada una de ellas, creamos un objeto JSON con el título, el resumen, el contenido y la URL. Al final, todo el contenido se almacena en una variable llamada json que se imprime en la página. 3. Creación del archivo search.js En el fichero search.js lo que hacemos es crear una clase que se encargará de buscar en el JSON. Para ello, necesitamos crear un objeto con los parámetros que necesitamos para la búsqueda. En este caso, el JSON que hemos generado, el campo de búsqueda y el contenedor donde se mostrarán los resultados. También necesitamos la URL del sitio para poder generar los enlaces a los resultados. Los parametros necesarios se les pasarán al constructor de la clase a través de un objeto. La función fetchedData() se encarga de obtener los datos de la busqueda. Para ello, usamos fetch para obtener los datos y los convertimos a JSON. Después, la función findResults() se encarga de buscar los resultados que coincidan con el valor del campo de búsqueda. Para ello, necesitamos crear una expresión regular con el valor del campo de búsqueda y filtrar los resultados que coincidan con el título o el contenido. displayResults() se encarga de mostrar los resultados de la búsqueda. Para ello, primero recoge los resultados de la función findResults() y genera un HTML con los resultados. En caso de que no haya resultados o el campo de búsqueda esté vacío, muestra un mensaje de error. Finalmente, muestra el HTML generado en el contenedor de resultados. En la funcion init() se crea un objeto URL para obtener el parámetro de búsqueda en la URL actual. Si existe, se establece el valor del campo de búsqueda en el valor del parámetro de búsqueda. Luego, se llama a la función displayResults() para mostrar los resultados de la búsqueda. Si no hay resultados, se muestra un mensaje de error. El evento keyup se agrega al campo de búsqueda. Cuando el usuario presiona una tecla, se llama a la función displayResults() para actualizar los resultados de la búsqueda. Luego, se establece el parámetro de búsqueda en el campo de búsqueda y se actualiza la URL. A su vez agregamos también el evento keypress al campo de búsqueda, así que cuando el usuario presione Enter, se evita el comportamiento predeterminado del navegador, que es recargar la página. 4. Creación del archivo search.md En el fichero search.md lo que hacemos es crear una página que se encargará de mostrar el resultado de la búsqueda. Para ello, creamos un formulario con un campo de búsqueda y un contenedor donde se mostrarán los resultados. En el formulario, creamos un evento que se encargará de llamar a la función init() de la clase JekyllSearch. 5. Resumen capitulo 2 del libro Developing Information Systems, editado by James Cadle El ciclo de desarrollo de sistemas, es el proceso de creación o modificación de los sistemas, modelos y metodologías que la gente usa para desarrollar estos sistemas de software, ya sea hardware o software. Las fases que lo componen son: Estudio de viabilidad: se analiza la viabilidad del proyecto comprobando si el ROI es lo suficientemente bueno como para empezar el proyecto en sí. Análisis de requisitos: se analizan los requisitos del sistema, se identifican los problemas y se establecen los objetivos que habrá que cumplir. Diseño: se diseña el sistema considerando varias soluciones para cumplir los requisitos especificados. Desarrollo: se empieza a construir el sistema, se desarrolla el código y se crean de una a una las distintas funcionalidades. Pruebas: se prueban las funcionalidades del sistema para comprobar que cumplen los requisitos especificados. Implantación: se despliega el sistema en el entorno de producción. Los elementos que componen el ciclo de desarrollo de sistemas son: Contexto: es el entorno en el que se desarrolla el proyecto, que es necesario comprender en su totalidad para saber como puede afectar al desarrollo de nuestro sistema. Ciclo de vida: es el proceso de desarrollo del sistema, que se divide en fases. Puede ser tanto lineal como iterativo. Proceso: es el conjunto de actividades que se llevan a cabo en cada fase del ciclo de vida para generar un determinado output. -Roles: son los distintos papeles que desempeñan las personas que participan en el proyecto. Entregables: son los productos que se generan en cada fase del ciclo de vida. Pueden ser componentes software, hardware, documentación, diseños… Técnicas: son las herramientas que se utilizan para llevar a cabo las actividades del proceso, como por ejemplo el Desarrollo dirigido por pruebas (TDD) o los diagramas UML. Es necesario saber que tipo de herramientas son más adecuadas para la creación de nuestro sistema, para así no entorpecer su desarrollo. A lo largo de los años, se han ido desarrollando distintas metodologías para el desarrollo de sistemas, cada una con sus ventajas e inconvenientes. Aún así no existe una metodología que sea la mejor para todos los proyectos, ya que cada proyecto es diferente y requiere una metodología diferente, por lo que seguir los pasos de un determinado CDS a raja tabla no es siempre la clave para un mejor proyecto. Se podría decir que normalmente se asocian dos enfoques al ciclo de desarrollo de sistemas (lineal o evolutivo), como también 5 tipos de metodologías (en cascada, metodo-V, espiral, iterativo e incremental). Vamos a comparar el enfoque lineal con el enfoque evolutivo: Enfoque lineal: se desarrolla el sistema en una única fase, en la que se llevan a cabo todas las actividades del proceso. Esto conlleva ciertas ventajas, como por ejemplo que es más fácil de gestionar, ya que se puede controlar mejor el proyecto o también que es más fácil de planificar, ya que se sabe desde el principio que actividades se van a llevar a cabo. También tiene ciertas desventajas, como por ejemplo que no se puede comprobar si el sistema cumple los requisitos hasta que no se ha terminado de desarrollar. Además, en caso de que los requisitos cambien, se tendría que volver a empezar el proyecto practicamente desde cero. Practicamente, es un enfoque más adecuado para proyectos pequeños o no muy complejos. Enfoque evolutivo: se desarrolla el sistema en varias fases, en las que se llevan a cabo las actividades del proceso. Esto conlleva ciertas ventajas, como por ejemplo que se puede comprobar si el sistema cumple los requisitos a lo largo del desarrollo, por lo que se puede corregir cualquier error que se encuentre. También involucra más al cliente, ya que se le puede mostrar el sistema en cada fase para que pueda dar su opinión. También tiene ciertas desventajas, como por ejemplo que es más difícil de gestionar, ya que se puede perder el control del proyecto. Además, los costes de desarrollo son mayores, ya que se llevan a cabo más actividades. Como podemos ver, es un enfoque más adecuado para proyectos grandes, complejos o con cambios muy frecuentes. Los ciclos de vida basados en el enfoque lineal son: Ciclo de vida en cascada: en el ciclo de vida en cascada es necesario terminar una fase antes de empezar la siguiente. En caso de que hay un problema en una fase, volvemos a empezar en la fase anterior para intentar corregirlo. Se trata de un ciclo de vida muy simple, que se basa en la planificación de las actividades del proceso. Es bueno para proyectos que sabemos que no van a cambiar mucho en cuanto a requisitos y a la solución que se va a emplear. También hay que tener en cuenta que no hay una entrega con software funcional hasta que no se ha llegado a la implementación y que implementar cambios en el sistema es muy costoso. Ciclo de vida en V: en el ciclo de vida en V, se desarrolla el sistema en dos “lados” de una V, en las que se llevan a cabo las actividades del proceso. El lado izquierdo de la V representa la descomposición de las necesidades, y la creación de las especificaciones del sistema. El lado derecho de la V representa la integración de las piezas y su verificación. V significa «Verificación y validación». Es muy similar al modelo de la cascada clásico ya que es muy rígido y contiene una gran cantidad de iteraciones, aunque se puede considerar como una extensión de dicho modelo, apuntando a mejorar el coste de tiempo al introducir cambios en el proyecto. También existe una versión extendida del ciclo de vida en V, que se llama ciclo de vida en V extendido. Tiene más enfoque en el desarrollo y pruebas de productos de calidad y también es fácil de escalar. Hay mucho rigor en el proceso y testeo de los productos. Esto no es muy adecuado para proyectos más simples, ya que el proceso es muy costoso. También comparte la desventaja del modelo en cascada de que no hay una entrega con software funcional hasta que no se ha llegado a la implementación. Ciclo de vida incremental: a diferencia de los dos anteriores ciclos de vida, tras haber diseñado y comprendido que es lo que se quiere hacer, se desarrolla el sistema pudiendose centar en la entrega de ciertas partes funcionales antes que otras. Esto conlleva ciertas ventajas, como por ejemplo cumplir primero los requisitos con más prioridad y el poder entregar de forma paralela varios elementos funcionales, resolviendo así el inconveniente de las dos anteriores metodologías de no poder entregar software funcional hasta que no se ha llegado a la fase de implementación. Es muy bueno para proyectos que requieren una salida rápida al mercado, ya que se pueden entregar partes funcionales del sistema antes de tiempo para ir luego incrementando sus funcionalidades a lo largo del tiempo. De todas formas sigue requiriendo una gran cantidad de planificación y control, ya que se debe tener en cuenta que las partes funcionales que se van a entregar deben ser compatibles entre sí. Gracias a este tipo de metodología, se puede ir adaptando el sistema a los cambios que se vayan produciendo en el proyecto, por lo que la gestión de riesgos es mucho más sencilla. También facilita más la parte de testeos, ya que se pueden ir testeando los pequeños incrementos que se van aportando y con las entregas en paralelo se puede sacar el producto al mercado antes. Aunque tiene ciertas ventajas, también tiene ciertas desventajas, como por ejemplo que el coste de desarrollo es mayor, ya que se llevan a cabo más actividades paralelas, además de ser algo complicado de gestionar. También es necesario tener en cuenta que el sistema no estará completo hasta que no se hayan completado todas las fases. Los ciclos de vida basados en el enfoque evolutivo son: Ciclo de vida iterativo: en el ciclo de vida iterativo se divide cada “parte” del proyecto en pequeñas iteraciones, en las que se llevan a cabo las actividades del proceso, como por ejemplo los requisitos, el analisis, el desarrollo o el testeo. Se podría decir que hay un mínimo de tres iteraciones necesarias y son: · Investigación: en esta iteración se realiza una investigación sobre el proyecto y se realiza un análisis de riesgos. · Refinamiento: en esta iteración se realiza un análisis más detallado del proyecto y se realizan los requisitos. · Consolidación: en esta iteración se realiza la implementación y el testeo. Es bueno para proyectos con muchos cambios pero donde queremos controlar más los costes. También promueve la colaboración entre el cliente y el equipo de desarrollo, ya que se realizan iteraciones cortas y se puede ir adaptando el sistema a los cambios que se vayan produciendo en el proyecto. Tiene una gran cantidad de iteraciones, por lo que puede llegar a ser muy complejo a la hora de gestionar los diferentes equipos de desarrollo. Y aunque los costes se pueden controlar más, seguirá siendo muy costoso. Ciclo de vida en espiral: en el ciclo de vida en espiral combinamos el modelo de desarrollo iterativo con prototipos de testeo para entender y mejorar los requisitos del proyecto, por lo que no necesitas unos requisitos exactos ya establecidos antes de empezar. Las fases del ciclo de vida en espiral son: · Determinación de objetivos: en esta fase se establecen los objetivos del proyecto. · Análisis y resolución de riesgos: en esta fase se analizan los riesgos del proyecto, que posteriormente irán evolucionando basandose en la retroalimentación proporcionada por las pruebas de los prototipos. · Desarrollo y testeo: en esta fase se desarrollan prototipos para testear el proyecto. · Planear la siguiente iteración. Tiene más o menos las mismas ventajas que el ciclo de vida iterativo, con el añadido de una mejor gestión de riesgos. Por otro lado los costes llegan a ser incluso mayores y hay más enfoque en la parte funcionante del sistema, por lo que no es muy adecuado para proyectos que requieran una gran cantidad de documentación. Ágil es un término popular que ahora se da a los enfoques de desarrollo evolutivo tras el Manifiesto Ágil” de 2001. El Manifiesto Ágil dio lugar a una nueva forma de pensar sobre el desarrollo de software y surgió una nueva moda de métodos, procesos y ciclos de vida de desarrollo Agile. Los ciclos de vida lineales, como el de cascada, el modelo en “V” y el incremental cedieron paso a enfoques más evolutivos como Scrum y el Proceso Ágil Unificado. Para tener éxito, muchos métodos ágiles dependen del rigor y el cumplimiento de las normas. Aunque puede que no dependan de mucha documentación previa al desarrollo, sí dependen de procesos muy rigurosos. Debido a que los enfoques ágiles han nacido para equipos pequeños y altamente colaborativos, funcionan muy bien en ese tipo de entornos. Enfoques de desarrollo Los enfoques de desarrollo son una forma de organizar el desarrollo de software. Algunos de ellos son: SSADM (Structured Systems Analysis and Design Methodology): El método SSADM implica la aplicación de una secuencia de tareas de análisis, documentación y diseño relacionados con las siguientes etapas: Etapa 0 - Estudio de viabilidad Etapa 1 - Investigación de la situación actual Etapa 2 - opciones del sistema de negocios Etapa 3 - Requisitos de especificación Etapa 4 - opciones del sistema Técnicas Etapa 5 - Diseño lógico Etapa 6 - Diseño físico También las tres técnicas más importantes que se utilizan en SSADM son los siguientes: Modelado de datos lógicos Modelado de flujo de datos Modelado Entidad Evento DSDM (Dynamic Systems Development Method): El éxito de DSDM se debe a su convicción de que cualquier proyecto debe estar alineado con objetivos estratégicos claramente definidos y centrarse en la entrega temprana. El respaldo de esta filosofía con los ocho principios permite a los equipos mantener el enfoque y alcanzar los objetivos del proyecto. Dichos principios son: Centrarse en la necesidad comercial Entregar a tiempo Colaborar Nunca comprometer la calidad Construir incrementalmente a partir de cimientos firmes Desarrollar iterativamente Comunicarse de forma continua y clara Demostrar control Scrum: es un enfoque de desarrollo que se basa en la metodología ágil. Es un proceso en el que se aplican de manera regular un conjunto de buenas prácticas para trabajar colaborativamente, en equipo y obtener el mejor resultado posible de proyectos. Scrum es un marco de trabajo que define un conjunto de eventos, prácticas y roles,​ y que puede tomarse como conjunto base para definir el proceso de producción que usará un equipo de trabajo o dentro de un proyecto. Los roles principales en Scrum son el Scrum Master, que procura facilitar la aplicación de Scrum y gestionar cambios, el Product Owner, que representa a los interesados, y el Team que ejecuta el desarrollo y demás elementos relacionados con él. Durante cada sprint el equipo crea un incremento de software entregable. El conjunto de características que forma parte de cada sprint viene del Product Backlog, que es un conjunto de requisitos de alto nivel priorizados que definen el trabajo a realizar. Los elementos del Product Backlog que forman parte del sprint se determinan durante la reunión de Sprint Planning. Durante esta reunión, el Product Owner identifica los elementos del Product Backlog que quiere ver completados y los da a conocer al equipo. RUP (Rational Unified Process): El proceso Rational Unified (RUP) es un proceso de ingeniería de software iterativo, evolutivo e incremental, construido sobre los cimientos del modelo espiral, que asigna y gestiona tareas y responsabilidades de forma disciplinada dentro de una organización desarrollo. El proceso RUP se basa en cuatro fases: · Inicio · Elaboración · Construcción · Transición Al ser un proceso de software, RUP es popular entre los equipos de desarrolladores y utiliza uso extensivo de UML (el Lenguaje Unificado de Modelado) para el Análisis y Diseño orientado a objetos (OOA&amp;amp;D) y el modelado de casos. Esto puede resultar abrumador pero fomenta un diseño sólido y una buena trazabilidad. Lean Software Development: Se trata de un conjunto de técnicas y herramientas que pueden aplicarse para eliminar el malgasto de dinero en la fabricación y mejorar así la productividad. Se basa en los siguientes principios son: · Centrarse en los clientes; · Dinamizar a los trabajadores; · Eliminar el despilfarro; · Aprender rápido; · Entregar rápido; · Incorporar la calidad; · Seguir mejorando; · Optimizar el conjunto.</summary></entry><entry><title type="html">Informe</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/" rel="alternate" type="text/html" title="Informe" /><published>2022-10-01T00:00:00+00:00</published><updated>2022-10-01T00:00:00+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;

  &lt;h1 align=&quot;center&quot;&gt;Informe práctica Introduction to Systems Development &lt;/h1&gt;

&lt;/p&gt;

&lt;!-- TABLE OF CONTENTS --&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/#reconfigurando-_configyml-y-valores-de-default&quot;&gt;Reconfigurando _config.yml y valores de default&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/#desplegando-el-sitio-web-en-github-pages-usando-jekyll&quot;&gt;Desplegando el sitio Web en GitHub pages usando Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/#utilizando-liquid-para-mostrar-parametros-obtenidos-por-un-json-que-ha-sido-creado-en-_data&quot;&gt;Utilizando liquid para mostrar parametros obtenidos por un .json que ha sido creado en _data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/#creando-una-jekyll-collection&quot;&gt;Creando una Jekyll collection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/#creando-una-p%C3%A1gina-404-personalizada&quot;&gt;Creando una página 404 personalizada&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; &lt;a href=&quot;https://ull-esit-dmsi-2223.github.io/intro2sd-gianmarco-corbo-alu0101134741/post%20formats/informe/#despliegue-en-netlify&quot;&gt;Despliegue en Netlify&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reconfigurando-_configyml-y-valores-de-default&quot;&gt;Reconfigurando _config.yml y valores de default&lt;/h2&gt;

&lt;p&gt;Editar el archivo &lt;em&gt;_config.yml&lt;/em&gt; permite configurar la mayoría de los valores de Jekyll, como los temas y los plugins del sitio web.
En este caso, se han modificado los siguientes parametros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;minimal_mistakes_skin&lt;/strong&gt;: Se ha cambiado la skin a &lt;em&gt;aqua&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;locale&lt;/strong&gt;: Indica el idioma en la que está escrita la página. En este caso se ha cambiado a &lt;em&gt;es-ES&lt;/em&gt; para que resulte el idioma español de España.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;title&lt;/strong&gt;: El titulo de la página. Se ha cambiado a &lt;em&gt;Introducción a Desarrollo y mantenimiento de Sistemas&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;subtitle&lt;/strong&gt;: El subtitulo de la página. Se ha modificado especificando para que se va a usar la página.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: Ancla YAML que se usa para mostrar el nombre del autor de la página y que se puede referenciar en otras partes del archivo de configuración. Se ha cambiado a &lt;em&gt;Gianmarco Corbo&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;description&lt;/strong&gt;: Otra ancla que se podrá referenciar, donde hay una pequeña descripción de la página.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;baseurl&lt;/strong&gt;: Subruta de la url de la página web, se ha modificado para que sea el repositorio de esta práctica.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Este objeto es para representar el autor de la página, por lo que se han modificado varios parametros:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;*name&lt;/strong&gt;: Referencia al ancla &lt;em&gt;name&lt;/em&gt; que se modificó anteriormente.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;avatar&lt;/strong&gt;: Ruta para el archivo de la imagen del autor.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;bio&lt;/strong&gt;: Una descripción del autor. Se ha modificado a &lt;em&gt;Estudiante de la Universidad de La Laguna&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt;: Lugar de residencia del autor. Modificado a &lt;em&gt;Islas Canarias&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;links&lt;/strong&gt;: Array de enlaces de referencia. Se han borrado los relativos a Instagram y Twitter, mientras que se ha modificado el de Github para que el enlace lleve a la página de github https://github.com/Gia-ui .&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;footer&lt;/strong&gt;:  Representa el pie de página.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;links&lt;/strong&gt;: Array de enlaces que se mostrarán en el pie de página. Se ha modificado solo el enlace de Github para que lleve a la página de https://github.com/Gia-ui .&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/CapturaConfig1.png&quot; alt=&quot;CapturaConfig1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/CapturaConfig2.png&quot; alt=&quot;CapturaConfig2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/CapturaConfig3.png&quot; alt=&quot;CapturaConfig3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;También se han modificado algunos parametros de default, donde se especifican unas reglas generales que se aplicarán a un grupo especifico de páginas, como por ejemplo los posts o las colecciones:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/defaultConfig1.png&quot; alt=&quot;defaultConfig1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/defaultConfig2.png&quot; alt=&quot;defaultConfig2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;desplegando-el-sitio-web-en-github-pages-usando-jekyll&quot;&gt;Desplegando el sitio Web en GitHub pages usando Jekyll&lt;/h2&gt;

&lt;p&gt;Para desplegar una página con gh-pages usamos el siguiente comando: &lt;em&gt;npx gh-pages -d _site&lt;/em&gt;.
Npx es un ejecutor de paquetes basados en Node.js, que en este caso es gh-pages.
Gh-pages es un paquete que contiene un módulo de despliegue automático que realiza las tareas necesarias para el despliegue de la página web de nuestro repositorio en los servidores de github de gh-pages.
Crea automáticamente una rama en nuestro repositorio llamada gh-pages donde situa los archivos necesarios para el despliegue de la página.
Si vamos a nuestro repositorio y seleccionamos &lt;em&gt;Actions&lt;/em&gt; se nos mostrará un workflow por cada despliegue que hemos realizado, por lo que, en caso de que ocurra algún problema durante la operación, podremos visualizar el error aquí, para así poder solucionarlo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/CapturaDeployGhpages.png&quot; alt=&quot;CapturaConfig3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tras eso, enlazamos la página web a nuestro perfil personal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/EnlazarPaginaPersonal.png&quot; alt=&quot;CapturaConfig3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;utilizando-liquid-para-mostrar-parametros-obtenidos-por-un-json-que-ha-sido-creado-en-_data&quot;&gt;Utilizando liquid para mostrar parametros obtenidos por un .json que ha sido creado en _data&lt;/h2&gt;

&lt;p&gt;Se ha creado un archivo &lt;em&gt;gianmarco.json&lt;/em&gt; en la carpeta &lt;em&gt;_data&lt;/em&gt; donde figura información sobre el alumno Gianmarco Corbo y se usará Liquid para mostrar dicha información:&lt;/p&gt;

&lt;p&gt;El nombre y apellido del alumno es Gianmarco Corbo. &lt;br /&gt;
Nació el 21/06/1999 en Augusta, Italia, por lo que su nacionalidad es Italiana. &lt;br /&gt;
Desde entonces ha vivido en las siguientes ciudades:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Augusta&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Agrigento&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adeje&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;San Cristobal de La Laguna&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ha cursado en la Universidad de La Laguna la/s siguiente/s titulación/es:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Grado en ingeniería informatica&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Además, es el creador de esta página llamada Informe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/jsonLiquid1.png&quot; alt=&quot;jsonLiquid1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/jsonLiquid2.png&quot; alt=&quot;jsonLiquid2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creando-una-jekyll-collection&quot;&gt;Creando una Jekyll collection&lt;/h2&gt;

&lt;p&gt;Vamos a crear una colección que incluirá varios lenguajes de programación con una pequeña descripción y que se mostrarán todos en una página. &lt;br /&gt;
En el archivo &lt;em&gt;_config.yml&lt;/em&gt;, definimos nuestra colección en &lt;em&gt;collections&lt;/em&gt; y la llamamos &lt;em&gt;lenguajes&lt;/em&gt; como se muestra en la siguiente captura, añadiendo también el parametro &lt;em&gt;output&lt;/em&gt; asignandole &lt;em&gt;true&lt;/em&gt; para que Jekyll cree una página por cada uno de los elementos de nuestra colección:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/collectionsConfig.png&quot; alt=&quot;collectionsConfig&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tras eso creamos un archivo llamado &lt;em&gt;lenguajes-archive.html&lt;/em&gt;, donde lo que haremos será mostrar en orden los elementos de la colección &lt;em&gt;lenguajes&lt;/em&gt;, recorriendolos de uno en uno:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/lenguajes-archive.png&quot; alt=&quot;lenguajesArchive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, en el archivo &lt;em&gt;navigation.yml&lt;/em&gt; creamos en &lt;em&gt;main&lt;/em&gt; un enlace para acceder a la página de &lt;em&gt;lenguajes-archive.html&lt;/em&gt; desde la barra superior de nuestra web.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/navigationMain.png&quot; alt=&quot;navigationMain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/enlaceColeccion.png&quot; alt=&quot;enlaceColeccion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/paginaColeccion.png&quot; alt=&quot;paginaColeccion&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creando-una-página-404-personalizada&quot;&gt;Creando una página 404 personalizada&lt;/h2&gt;

&lt;p&gt;Creamos un fichero &lt;em&gt;404.md&lt;/em&gt; donde detallaremos los parametros que usará Jekyll para la creación de la página 404. &lt;br /&gt;
Primero escribimos el mensaje que aparecerá en pantalla, que será &lt;strong&gt;Error: la página que está buscando no existe.&lt;/strong&gt;. &lt;br /&gt;
Tras eso vamos a usar unos servicios web para mostrar una imagen aleatoria de un perrito y también una cita famosa y su autor. Definimos el estilo de los elementos que mostraremos con esas API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/estiloApi.png&quot; alt=&quot;estiloApi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Después incluimos el script que interactuará con las APIs para obtener la imagen del perrito y la cita con su autor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/scriptApi.png&quot; alt=&quot;scriptApi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si probamos a buscar una página que no existe, ahora nos saldrá esto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/error404.png&quot; alt=&quot;error404&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;despliegue-en-netlify&quot;&gt;Despliegue en Netlify&lt;/h2&gt;

&lt;p&gt;Para poder realizar el despliegue con Netlify primero creamos una cuenta en la página, posiblemente asociandola a la cuenta de github donde tengamos el repositorio. &lt;br /&gt;
Tras eso seleccionamos &lt;em&gt;Import an existing project&lt;/em&gt; y accedemos con las credenciales de github.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/desplieguepaso1.png&quot; alt=&quot;desplieguepaso1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente seleccionamos el repositorio que queramos desplegar, asegurandonos de que sea publico, ya que para el despliegue a partir de un repositorio privado es necesario una suscripción de pago.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/desplieguepaso2.png&quot; alt=&quot;desplieguepaso2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora solo nos queda modificar los ajustes basicos que se usaran para el build. &lt;br /&gt;
Antes de seguir, vamos al archivo &lt;strong&gt;_config.dev.yml&lt;/strong&gt; en nuestro repositorio, donde estarán cologados los ajustes de sobrecarga del archivo _config.yml, y añadimos la siguiente línea: &lt;em&gt;baseurl: ““&lt;/em&gt;. &lt;br /&gt;
Ahora volvemos a los ajustes basicos de despliegue de netlify y cambiamos el comando que se usará para realizar el despliegue de &lt;strong&gt;npm run build&lt;/strong&gt; a &lt;strong&gt;jekyll build –config _config.yml,_config.dev.yml&lt;/strong&gt; para que use la configuración del fichero &lt;strong&gt;_config.yml&lt;/strong&gt; sobrecargada por la del fichero &lt;strong&gt;_config.dev.yml&lt;/strong&gt;. Si no se realizan esos cambios, la página se desplegará mal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/desplieguepaso3.png&quot; alt=&quot;desplieguepaso3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/intro2sd-gianmarco-corbo-alu0101134741/assets/images/desplieguepaso4.png&quot; alt=&quot;desplieguepaso4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tras desplegarse, la página está disponible en el siguiente enlace: https://clever-meringue-d456ac.netlify.app/ .&lt;/p&gt;</content><author><name>Gianmarco Corbo</name></author><category term="Post Formats" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">Informe práctica Introduction to Systems Development 1. Reconfigurando _config.yml y valores de default 2. Desplegando el sitio Web en GitHub pages usando Jekyll 3. Utilizando liquid para mostrar parametros obtenidos por un .json que ha sido creado en _data 4. Creando una Jekyll collection 5. Creando una página 404 personalizada 6. Despliegue en Netlify Reconfigurando _config.yml y valores de default Editar el archivo _config.yml permite configurar la mayoría de los valores de Jekyll, como los temas y los plugins del sitio web. En este caso, se han modificado los siguientes parametros: minimal_mistakes_skin: Se ha cambiado la skin a aqua. locale: Indica el idioma en la que está escrita la página. En este caso se ha cambiado a es-ES para que resulte el idioma español de España. title: El titulo de la página. Se ha cambiado a Introducción a Desarrollo y mantenimiento de Sistemas. subtitle: El subtitulo de la página. Se ha modificado especificando para que se va a usar la página. name: Ancla YAML que se usa para mostrar el nombre del autor de la página y que se puede referenciar en otras partes del archivo de configuración. Se ha cambiado a Gianmarco Corbo. description: Otra ancla que se podrá referenciar, donde hay una pequeña descripción de la página. baseurl: Subruta de la url de la página web, se ha modificado para que sea el repositorio de esta práctica. author: Este objeto es para representar el autor de la página, por lo que se han modificado varios parametros: *name: Referencia al ancla name que se modificó anteriormente. avatar: Ruta para el archivo de la imagen del autor. bio: Una descripción del autor. Se ha modificado a Estudiante de la Universidad de La Laguna. location: Lugar de residencia del autor. Modificado a Islas Canarias. links: Array de enlaces de referencia. Se han borrado los relativos a Instagram y Twitter, mientras que se ha modificado el de Github para que el enlace lleve a la página de github https://github.com/Gia-ui . footer: Representa el pie de página. links: Array de enlaces que se mostrarán en el pie de página. Se ha modificado solo el enlace de Github para que lleve a la página de https://github.com/Gia-ui . También se han modificado algunos parametros de default, donde se especifican unas reglas generales que se aplicarán a un grupo especifico de páginas, como por ejemplo los posts o las colecciones: Desplegando el sitio Web en GitHub pages usando Jekyll Para desplegar una página con gh-pages usamos el siguiente comando: npx gh-pages -d _site. Npx es un ejecutor de paquetes basados en Node.js, que en este caso es gh-pages. Gh-pages es un paquete que contiene un módulo de despliegue automático que realiza las tareas necesarias para el despliegue de la página web de nuestro repositorio en los servidores de github de gh-pages. Crea automáticamente una rama en nuestro repositorio llamada gh-pages donde situa los archivos necesarios para el despliegue de la página. Si vamos a nuestro repositorio y seleccionamos Actions se nos mostrará un workflow por cada despliegue que hemos realizado, por lo que, en caso de que ocurra algún problema durante la operación, podremos visualizar el error aquí, para así poder solucionarlo. Tras eso, enlazamos la página web a nuestro perfil personal: Utilizando liquid para mostrar parametros obtenidos por un .json que ha sido creado en _data Se ha creado un archivo gianmarco.json en la carpeta _data donde figura información sobre el alumno Gianmarco Corbo y se usará Liquid para mostrar dicha información: El nombre y apellido del alumno es Gianmarco Corbo. Nació el 21/06/1999 en Augusta, Italia, por lo que su nacionalidad es Italiana. Desde entonces ha vivido en las siguientes ciudades: Augusta Agrigento Adeje San Cristobal de La Laguna Ha cursado en la Universidad de La Laguna la/s siguiente/s titulación/es: Grado en ingeniería informatica Además, es el creador de esta página llamada Informe. Creando una Jekyll collection Vamos a crear una colección que incluirá varios lenguajes de programación con una pequeña descripción y que se mostrarán todos en una página. En el archivo _config.yml, definimos nuestra colección en collections y la llamamos lenguajes como se muestra en la siguiente captura, añadiendo también el parametro output asignandole true para que Jekyll cree una página por cada uno de los elementos de nuestra colección: Tras eso creamos un archivo llamado lenguajes-archive.html, donde lo que haremos será mostrar en orden los elementos de la colección lenguajes, recorriendolos de uno en uno: Finalmente, en el archivo navigation.yml creamos en main un enlace para acceder a la página de lenguajes-archive.html desde la barra superior de nuestra web. Creando una página 404 personalizada Creamos un fichero 404.md donde detallaremos los parametros que usará Jekyll para la creación de la página 404. Primero escribimos el mensaje que aparecerá en pantalla, que será Error: la página que está buscando no existe.. Tras eso vamos a usar unos servicios web para mostrar una imagen aleatoria de un perrito y también una cita famosa y su autor. Definimos el estilo de los elementos que mostraremos con esas API. Después incluimos el script que interactuará con las APIs para obtener la imagen del perrito y la cita con su autor: Si probamos a buscar una página que no existe, ahora nos saldrá esto: Despliegue en Netlify Para poder realizar el despliegue con Netlify primero creamos una cuenta en la página, posiblemente asociandola a la cuenta de github donde tengamos el repositorio. Tras eso seleccionamos Import an existing project y accedemos con las credenciales de github. Posteriormente seleccionamos el repositorio que queramos desplegar, asegurandonos de que sea publico, ya que para el despliegue a partir de un repositorio privado es necesario una suscripción de pago. Ahora solo nos queda modificar los ajustes basicos que se usaran para el build. Antes de seguir, vamos al archivo _config.dev.yml en nuestro repositorio, donde estarán cologados los ajustes de sobrecarga del archivo _config.yml, y añadimos la siguiente línea: baseurl: ““. Ahora volvemos a los ajustes basicos de despliegue de netlify y cambiamos el comando que se usará para realizar el despliegue de npm run build a jekyll build –config _config.yml,_config.dev.yml para que use la configuración del fichero _config.yml sobrecargada por la del fichero _config.dev.yml. Si no se realizan esos cambios, la página se desplegará mal. Tras desplegarse, la página está disponible en el siguiente enlace: https://clever-meringue-d456ac.netlify.app/ .</summary></entry><entry><title type="html">Layout: Header Video</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/layout/uncategorized/layout-header-video/" rel="alternate" type="text/html" title="Layout: Header Video" /><published>2017-01-23T00:00:00+00:00</published><updated>2017-01-23T00:00:00+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/layout/uncategorized/layout-header-video</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/layout/uncategorized/layout-header-video/">&lt;p&gt;This post should display a &lt;strong&gt;header with a responsive video&lt;/strong&gt;, if the theme supports it.&lt;/p&gt;

&lt;h2 id=&quot;settings&quot;&gt;Settings&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parameter&lt;/th&gt;
      &lt;th&gt;Required&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;ID of the video&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Hosting provider of the video, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vimeo&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;youtube&quot;&gt;YouTube&lt;/h3&gt;

&lt;p&gt;To embed the following YouTube video at url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.youtube.com/watch?v=-PVofD2A9t8&lt;/code&gt; (long version) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://youtu.be/-PVofD2A9t8&lt;/code&gt; (short version) into a post or page’s main content you’d use:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-PVofD2A9t8&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;youtube&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/-PVofD2A9t8&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;

&lt;p&gt;To embed it as a video header you’d use the following YAML Front Matter&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-PVofD2A9t8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;youtube&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vimeo&quot;&gt;Vimeo&lt;/h3&gt;

&lt;p&gt;To embed the following Vimeo video at url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://vimeo.com/212731897&lt;/code&gt; into a post or page’s main content you’d use:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;212731897&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vimeo&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://player.vimeo.com/video/212731897?dnt=true&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;

&lt;p&gt;To embed it as a video header you’d use the following YAML Front Matter&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;212731897&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vimeo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gianmarco Corbo</name></author><category term="Layout" /><category term="Uncategorized" /><category term="video" /><category term="layout" /><summary type="html">This post should display a header with a responsive video, if the theme supports it.</summary></entry><entry><title type="html">Gemified Theme – Beta Release</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/gemified-theme-beta/" rel="alternate" type="text/html" title="Gemified Theme – Beta Release" /><published>2016-10-06T00:00:00+00:00</published><updated>2018-03-20T20:01:04+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/gemified-theme-beta</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/gemified-theme-beta/">&lt;p&gt;Hot on the heels of Jekyll v3.3.0 is a beta release of Minimal Mistakes… as a gemified theme.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rubygems.org/gems/minimal-mistakes-jekyll&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistakes-jekyll&lt;/code&gt;&lt;/a&gt; can only be used with Jekyll proper. If you’re hosting on GitHub Pages or using that gem the theme won’t work. 3rd party themes haven’t been white-listed so it’s a no go for now.&lt;/p&gt;

&lt;p&gt;Fine with all that? Great. Let’s continue.&lt;/p&gt;

&lt;p&gt;If you’re migrating a site already using Minimal Mistakes and haven’t customized any of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt; partials, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; this should be quick and painless.&lt;/p&gt;

&lt;h2 id=&quot;step-1-remove-theme-files&quot;&gt;Step 1: Remove Theme Files&lt;/h2&gt;

&lt;p&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; folders and files within. You won’t need these anymore as they’re bundled in the theme.&lt;/p&gt;

&lt;p&gt;If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as &lt;a href=&quot;http://jekyllrb.com/docs/themes/#overriding-theme-defaults&quot;&gt;overrides&lt;/a&gt; to the versions bundled with the theme.&lt;/p&gt;

&lt;h2 id=&quot;step-2-update-gemfile&quot;&gt;Step 2: Update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;github-pages&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll&quot;&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll&quot;, &quot;~&amp;gt; 3.3.0&quot;&lt;/code&gt;. You’ll need the latest version of Jekyll&lt;sup id=&quot;fnref:update-jekyll&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:update-jekyll&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; for Minimal Mistakes to work and load all of the /assets/ properly.&lt;/p&gt;

&lt;p&gt;Add the Minimal Mistakes theme gem:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minimal-mistakes-jekyll&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When finished your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 3.3.0&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minimal-mistakes-jekyll&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-run-bundler&quot;&gt;Step 3: Run Bundler&lt;/h2&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; if you’re updating an existing repo) to install/update Jekyll and the theme.&lt;/p&gt;

&lt;h2 id=&quot;step-4-install-the-theme&quot;&gt;Step 4: Install the Theme&lt;/h2&gt;

&lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme: &quot;minimal-mistakes-jekyll&quot;&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you’re migrating from an existing Minimal Mistakes site you shouldn’t have to change anything else after this. If it’s a new site consult then docs to &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/configuration/&quot;&gt;properly config&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; Paths for image headers, overlays, teasers, &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/helpers/#gallery&quot;&gt;galleries&lt;/a&gt;, and &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/helpers/#feature-row&quot;&gt;feature rows&lt;/a&gt; have changed and now require a full path. Instead of just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image: filename.jpg&lt;/code&gt; you’ll need to use the full path eg: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image: assets/images/filename.jpg&lt;/code&gt;. The preferred location is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/images&lt;/code&gt; but can be placed elsewhere or external hosted. This all applies for image references in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author.yml&lt;/code&gt; as well.&lt;/p&gt;

&lt;h2 id=&quot;step-5-jekyll-new-tweaks&quot;&gt;Step 5: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt; Tweaks&lt;/h2&gt;

&lt;p&gt;If this is a new site be sure to add the following files to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/&lt;/code&gt; and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/blob/master/_data/ui-text.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/ui-text.yml&lt;/code&gt;&lt;/a&gt; - UI text &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/ui-text/&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/blob/master/_data/navigation.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt;&lt;/a&gt; - navigation &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/navigation/&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll also need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;site root&amp;gt;/index.html&lt;/code&gt; with a modified &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/blob/master/index.html&quot;&gt;Minimal Mistakes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: post&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts/0000-00-00-welcome-to-jekyll.markdown&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: single&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt;, or at the very least change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: page&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: single&lt;/code&gt; and remove references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icon-github.html&lt;/code&gt; (or &lt;a href=&quot;https://github.com/jekyll/minima/tree/master/_includes&quot;&gt;copy to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;&lt;/a&gt; if using).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;That’s it! If all goes well running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you’re testing the pre-release Ruby gem version.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/issues/new&quot; class=&quot;btn btn--info btn--large&quot;&gt;File an issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:update-jekyll&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;You could also run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update jekyll&lt;/code&gt; to update Jekyll. &lt;a href=&quot;#fnref:update-jekyll&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Gianmarco Corbo</name></author><category term="Jekyll" /><category term="update" /><summary type="html">Hot on the heels of Jekyll v3.3.0 is a beta release of Minimal Mistakes… as a gemified theme.</summary></entry><entry><title type="html">Gemified Theme – Alpha Release</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/gemified-theme-alpha/" rel="alternate" type="text/html" title="Gemified Theme – Alpha Release" /><published>2016-09-21T00:00:00+00:00</published><updated>2018-03-20T20:00:58+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/gemified-theme-alpha</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/gemified-theme-alpha/">&lt;p&gt;Jekyll &lt;a href=&quot;http://jekyllrb.com/docs/themes/&quot;&gt;themes distributed as Ruby gems&lt;/a&gt; are finally here to make installing and upgrading much easier. Gone are the days of forking a repo just to “install it”. Or dealing with merge conflicts when pulling in upstream commits to “upgrade it”.&lt;/p&gt;

&lt;p&gt;If you’re interested in testing out Minimal Mistakes as a gemified theme read on. There are a few caveats though:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Support for a theme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; folder was recently &lt;a href=&quot;https://github.com/jekyll/jekyll/pull/5364&quot;&gt;added to Jekyll core&lt;/a&gt;, but has yet to be released or rolled into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-pages&lt;/code&gt; gem. Meaning you can’t use Minimal Mistakes as a Ruby gem there just yet… locally served or self-hosted installs should be fine if you don’t mind using a pre-release version of Jekyll.&lt;/li&gt;
  &lt;li&gt;Windows users can’t currently use themes packaged as gems due to a &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/5192&quot;&gt;bug with file paths&lt;/a&gt; in Jekyll core. This is being worked on so hopefully a &lt;a href=&quot;https://github.com/jekyll/jekyll/pull/5256&quot;&gt;fix is on the way&lt;/a&gt; soon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fine with all that? Great. Let’s continue.&lt;/p&gt;

&lt;p&gt;If you’re migrating a site already using Minimal Mistakes and haven’t customized any of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt; partials, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; this should be quick and painless.&lt;/p&gt;

&lt;h2 id=&quot;step-1-remove-theme-files&quot;&gt;Step 1: Remove Theme Files&lt;/h2&gt;

&lt;p&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; folders and files within. You won’t need these anymore as they’re bundled in the theme.&lt;/p&gt;

&lt;p&gt;If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as &lt;a href=&quot;http://jekyllrb.com/docs/themes/#overriding-theme-defaults&quot;&gt;overrides&lt;/a&gt; to the versions bundled with the theme.&lt;/p&gt;

&lt;h2 id=&quot;step-2-update-gemfile&quot;&gt;Step 2: Update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In order to test you’ll need to install pre-release gems of Jekyll and Minimal Mistakes.&lt;/p&gt;

&lt;p&gt;Start by replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;github-pages&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll&quot;&lt;/code&gt; with the following:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/jekyll/jekyll.git&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add the pre-release Minimal Mistakes theme gem:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minimal-mistakes-jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/mmistakes/minimal-mistakes.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;feature/theme-gem&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When finished your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/jekyll/jekyll.git&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minimal-mistakes-jekyll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/mmistakes/minimal-mistakes.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;feature/theme-gem&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# gem &quot;jekyll-archives&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-sitemap&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-gist&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-feed&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-run-bundler&quot;&gt;Step 3: Run Bundler&lt;/h2&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; if you’re updating an existing repo) to install the pre-release gems.&lt;/p&gt;

&lt;h2 id=&quot;step-4-install-the-theme&quot;&gt;Step 4: Install the Theme&lt;/h2&gt;

&lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme: &quot;minimal-mistakes-jekyll&quot;&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you’re migrating from an existing Minimal Mistakes site you shouldn’t have to change anything else after this. If it’s a new site consult then docs to &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/configuration/&quot;&gt;properly config&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; Paths for image headers, overlays, teasers, &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/helpers/#gallery&quot;&gt;galleries&lt;/a&gt;, and &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/helpers/#feature-row&quot;&gt;feature rows&lt;/a&gt; have changed and now require a full path. Instead of just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image: filename.jpg&lt;/code&gt; you’ll need to use the full path eg: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image: assets/images/filename.jpg&lt;/code&gt;. The preferred location is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/images&lt;/code&gt; but can be placed elsewhere or external hosted. This applies for image references in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author.yml&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-5-jekyll-new-tweaks&quot;&gt;Step 5: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt; Tweaks&lt;/h2&gt;

&lt;p&gt;If this is a new site be sure to add the following files to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/&lt;/code&gt; and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/blob/master/_data/ui-text.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/ui-text.yml&lt;/code&gt;&lt;/a&gt; - UI text &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/ui-text/&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/blob/master/_data/navigation.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt;&lt;/a&gt; - navigation &lt;a href=&quot;/intro2sd-gianmarco-corbo-alu0101134741/docs/navigation/&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll also need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;site root&amp;gt;/index.html&lt;/code&gt; with a modified &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/blob/master/index.html&quot;&gt;Minimal Mistakes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: post&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts/0000-00-00-welcome-to-jekyll.markdown&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: single&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt;, or at the very least change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: page&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: single&lt;/code&gt; and remove references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icon-github.html&lt;/code&gt; (or &lt;a href=&quot;https://github.com/jekyll/minima/tree/master/_includes&quot;&gt;copy to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;&lt;/a&gt; if using).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;That’s it! If all goes well running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you’re testing the pre-release Ruby gem version.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes/issues/new&quot; class=&quot;btn btn--info btn--large&quot;&gt;File an issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name>Gianmarco Corbo</name></author><category term="Jekyll" /><category term="update" /><summary type="html">Jekyll themes distributed as Ruby gems are finally here to make installing and upgrading much easier. Gone are the days of forking a repo just to “install it”. Or dealing with merge conflicts when pulling in upstream commits to “upgrade it”.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2016-02-24T00:00:00+00:00</published><updated>2016-02-24T00:00:00+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/welcome-to-jekyll</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/jekyll/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Gianmarco Corbo</name></author><category term="Jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Markup: Syntax Highlighting</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup-syntax-highlighting/" rel="alternate" type="text/html" title="Markup: Syntax Highlighting" /><published>2013-08-16T00:00:00+00:00</published><updated>2018-01-03T14:45:06+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup-syntax-highlighting</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup-syntax-highlighting/">&lt;p&gt;Syntax highlighting is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;gfm-code-blocks&quot;&gt;GFM Code Blocks&lt;/h3&gt;

&lt;p&gt;GitHub Flavored Markdown &lt;a href=&quot;https://help.github.com/articles/creating-and-highlighting-code-blocks/&quot;&gt;fenced code blocks&lt;/a&gt; are supported. To modify styling and highlight colors edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/_sass/syntax.scss&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;#container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-240px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$monospace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$type-size-7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pagination&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% if page.previous %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.url }}{{ page.previous.url }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ page.previous.title }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous article&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% endif %}
  {% if page.next %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.url }}{{ page.next.url }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ page.next.title }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next article&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.pagination --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TagIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Page&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;index.html&apos;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;_layouts&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;tag_index.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;tag&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tag_title_prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;tag_title_prefix&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Tagged: &apos;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tag_title_suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;tag_title_suffix&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&amp;amp;#8211;&apos;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_title_prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;description&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;An archive of posts tagged &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;code-blocks-in-lists&quot;&gt;Code Blocks in Lists&lt;/h3&gt;

&lt;p&gt;Indentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.&lt;/code&gt;). Usually this will mean indenting 3 spaces instead of 4.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do step 1.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now do this:&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now you can do this.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;jekyll-highlight-tag&quot;&gt;Jekyll Highlight Tag&lt;/h3&gt;

&lt;p&gt;An example of a code blocking using Jekyll’s &lt;a href=&quot;https://jekyllrb.com/docs/templates/#code-snippet-highlighting&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% highlight %}&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// &apos;gulp html&apos; -- does nothing&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &apos;gulp html --prod&apos; -- minifies and gzips HTML files for production&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;siteFolderName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;htmlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htmlmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;removeComments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;collapseWhitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;collapseBooleanAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;removeAttributeQuotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;removeRedundantAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;minifyJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;minifyCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;optimized HTML&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;siteFolderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;gzipped HTML&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;siteFolderName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-wl&quot; data-lang=&quot;wl&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;bp&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;github-gist-embed&quot;&gt;GitHub Gist Embed&lt;/h3&gt;

&lt;p&gt;An example of a Gist embed below.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mmistakes/77c68fbb07731a456805a7b473f47841.js&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Syntax_highlighting&quot;&gt;http://en.wikipedia.org/wiki/Syntax_highlighting&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Gianmarco Corbo</name></author><category term="code" /><category term="syntax highlighting" /><summary type="html">Post displaying the various ways of highlighting code in Markdown.</summary></entry><entry><title type="html">Markup: Another Post with Images</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup-more-images/" rel="alternate" type="text/html" title="Markup: Another Post with Images" /><published>2013-05-22T00:00:00+00:00</published><updated>2013-05-22T00:00:00+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup-more-images</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup-more-images/">&lt;p&gt;Here are some examples of what a post with images might look like. If you want to display two or three images next to each other responsively use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;figure&lt;/code&gt; with the appropriate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;. Each instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;figure&lt;/code&gt; is auto-numbered and displayed in the caption.&lt;/p&gt;

&lt;h3 id=&quot;figures-for-images-or-video&quot;&gt;Figures (for images or video)&lt;/h3&gt;

&lt;h4 id=&quot;one-up&quot;&gt;One Up&lt;/h4&gt;

&lt;figure&gt;
	&lt;a href=&quot;http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_b.jpg&quot;&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_c.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://www.flickr.com/photos/80901381@N04/7758832526/&quot; title=&quot;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&quot;&gt;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.&lt;/p&gt;

&lt;h4 id=&quot;two-up&quot;&gt;Two Up&lt;/h4&gt;

&lt;p&gt;Apply the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;half&lt;/code&gt; class like so to display two images side by side that share the same caption.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;half&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/images/image-filename-1-large.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/images/image-filename-1.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/images/image-filename-2-large.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/images/image-filename-2.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Caption describing these two images.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’ll get something that looks like this:&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.JPG&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpeg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Two images.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;three-up&quot;&gt;Three Up&lt;/h4&gt;

&lt;p&gt;Apply the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;third&lt;/code&gt; class like so to display three images side by side that share the same caption.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;third&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/image-filename-1.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/image-filename-2.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/image-filename-3.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Caption describing these three images.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’ll get something that looks like this:&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; /&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; /&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; /&gt;
	&lt;figcaption&gt;Three images.&lt;/figcaption&gt;
&lt;/figure&gt;</content><author><name>Gianmarco Corbo</name></author><category term="sample post" /><category term="images" /><category term="test" /><summary type="html">Examples and code for displaying images in posts.</summary></entry><entry><title type="html">Markup: HTML Tags and Formatting</title><link href="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup/markup-html-tags-and-formatting/" rel="alternate" type="text/html" title="Markup: HTML Tags and Formatting" /><published>2013-01-11T00:00:00+00:00</published><updated>2013-01-11T00:00:00+00:00</updated><id>https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup/markup-html-tags-and-formatting</id><content type="html" xml:base="https://mmistakes.github.io/intro2sd-gianmarco-corbo-alu0101134741/markup/markup-html-tags-and-formatting/">&lt;p&gt;A variety of common markup showing how the theme styles them.&lt;/p&gt;

&lt;h2 id=&quot;header-two&quot;&gt;Header two&lt;/h2&gt;

&lt;h3 id=&quot;header-three&quot;&gt;Header three&lt;/h3&gt;

&lt;h4 id=&quot;header-four&quot;&gt;Header four&lt;/h4&gt;

&lt;h5 id=&quot;header-five&quot;&gt;Header five&lt;/h5&gt;

&lt;h6 id=&quot;header-six&quot;&gt;Header six&lt;/h6&gt;

&lt;h2 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h2&gt;

&lt;p&gt;Single line blockquote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stay hungry. Stay foolish.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Multi line blockquote with a cite reference:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;People think focus means saying yes to the thing you’ve got to focus on. But that’s not what it means at all. It means saying no to the hundred other good ideas that there are. You have to pick carefully. I’m actually as proud of the things we haven’t done as the things I have done. Innovation is saying no to 1,000 things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;small&quot;&gt;&lt;cite&gt;Steve Jobs&lt;/cite&gt; — Apple Worldwide Developers’ Conference, 1997&lt;/p&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Employee&lt;/th&gt;
      &lt;th&gt;Salary&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#&quot;&gt;John Doe&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;$1&lt;/td&gt;
      &lt;td&gt;Because that’s all Steve Jobs needed for a salary.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#&quot;&gt;Jane Doe&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;$100K&lt;/td&gt;
      &lt;td&gt;For all the blogging she does.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#&quot;&gt;Fred Bloggs&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;$100M&lt;/td&gt;
      &lt;td&gt;Pictures are worth a thousand words, right? So Jane × 1,000.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#&quot;&gt;Jane Bloggs&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;$100B&lt;/td&gt;
      &lt;td&gt;With hair like that?! Enough said.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Header1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Header2&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Header3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Foot1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Foot2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Foot3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;h2 id=&quot;definition-lists&quot;&gt;Definition Lists&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;Definition List Title&lt;/dt&gt;
  &lt;dd&gt;Definition list division.&lt;/dd&gt;
  &lt;dt&gt;Startup&lt;/dt&gt;
  &lt;dd&gt;A startup company or startup is a company or temporary organization designed to search for a repeatable and scalable business model.&lt;/dd&gt;
  &lt;dt&gt;#dowork&lt;/dt&gt;
  &lt;dd&gt;Coined by Rob Dyrdek and his personal body guard Christopher “Big Black” Boykins, “Do Work” works as a self motivator, to motivating your friends.&lt;/dd&gt;
  &lt;dt&gt;Do It Live&lt;/dt&gt;
  &lt;dd&gt;I’ll let Bill O’Reilly &lt;a href=&quot;https://www.youtube.com/watch?v=O_HyZ5aW76c&quot; title=&quot;We&apos;ll Do It Live&quot;&gt;explain&lt;/a&gt; this one.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;unordered-lists-nested&quot;&gt;Unordered Lists (Nested)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;List item one
    &lt;ul&gt;
      &lt;li&gt;List item one
        &lt;ul&gt;
          &lt;li&gt;List item one&lt;/li&gt;
          &lt;li&gt;List item two&lt;/li&gt;
          &lt;li&gt;List item three&lt;/li&gt;
          &lt;li&gt;List item four&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;List item two&lt;/li&gt;
      &lt;li&gt;List item three&lt;/li&gt;
      &lt;li&gt;List item four&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List item two&lt;/li&gt;
  &lt;li&gt;List item three&lt;/li&gt;
  &lt;li&gt;List item four&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ordered-list-nested&quot;&gt;Ordered List (Nested)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;List item one
    &lt;ol&gt;
      &lt;li&gt;List item one
        &lt;ol&gt;
          &lt;li&gt;List item one&lt;/li&gt;
          &lt;li&gt;List item two&lt;/li&gt;
          &lt;li&gt;List item three&lt;/li&gt;
          &lt;li&gt;List item four&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;List item two&lt;/li&gt;
      &lt;li&gt;List item three&lt;/li&gt;
      &lt;li&gt;List item four&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;List item two&lt;/li&gt;
  &lt;li&gt;List item three&lt;/li&gt;
  &lt;li&gt;List item four&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;forms&quot;&gt;Forms&lt;/h2&gt;

&lt;form&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;Personalia:&lt;/legend&gt;
    Name: &lt;input type=&quot;text&quot; size=&quot;30&quot; /&gt;&lt;br /&gt;
    Email: &lt;input type=&quot;text&quot; size=&quot;30&quot; /&gt;&lt;br /&gt;
    Date of birth: &lt;input type=&quot;text&quot; size=&quot;10&quot; /&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;

&lt;h2 id=&quot;buttons&quot;&gt;Buttons&lt;/h2&gt;

&lt;p&gt;Make any link standout more when applying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.btn&lt;/code&gt; class.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn--success&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Success Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn&quot;&gt;Default Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--primary&quot;&gt;Primary Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--success&quot;&gt;Success Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--warning&quot;&gt;Warning Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--danger&quot;&gt;Danger Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--info&quot;&gt;Info Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--inverse&quot;&gt;Inverse Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline&quot;&gt;Light Outline Button&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Default Button Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Primary Button Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--primary}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Success Button Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--success}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Warning Button Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--warning}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Danger Button Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--danger}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Info Button Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--info}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Inverse Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--inverse}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Light Outline Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--light-outline}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--primary btn--x-large&quot;&gt;X-Large Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--primary btn--large&quot;&gt;Large Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--primary&quot;&gt;Default Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn--primary btn--small&quot;&gt;Small Button&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X-Large Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--primary .btn--x-large}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Large Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--primary .btn--large}
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Default Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--primary }
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Small Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;#link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{: .btn .btn--primary .btn--small}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;notices&quot;&gt;Notices&lt;/h2&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; This paragraph of text has been &lt;a href=&quot;#&quot;&gt;emphasized&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{: .notice}&lt;/code&gt; class.&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; This paragraph of text has been &lt;a href=&quot;#&quot;&gt;emphasized&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{: .notice--primary}&lt;/code&gt; class.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; This paragraph of text has been &lt;a href=&quot;#&quot;&gt;emphasized&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{: .notice--info}&lt;/code&gt; class.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; This paragraph of text has been &lt;a href=&quot;#&quot;&gt;emphasized&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{: .notice--warning}&lt;/code&gt; class.&lt;/p&gt;

&lt;p class=&quot;notice--success&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; This paragraph of text has been &lt;a href=&quot;#&quot;&gt;emphasized&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{: .notice--success}&lt;/code&gt; class.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; This paragraph of text has been &lt;a href=&quot;#&quot;&gt;emphasized&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{: .notice--danger}&lt;/code&gt; class.&lt;/p&gt;

&lt;h2 id=&quot;html-tags&quot;&gt;HTML Tags&lt;/h2&gt;

&lt;h3 id=&quot;address-tag&quot;&gt;Address Tag&lt;/h3&gt;

&lt;address&gt;
  1 Infinite Loop&lt;br /&gt; Cupertino, CA 95014&lt;br /&gt; United States
&lt;/address&gt;

&lt;h3 id=&quot;anchor-tag-aka-link&quot;&gt;Anchor Tag (aka. Link)&lt;/h3&gt;

&lt;p&gt;This is an example of a &lt;a href=&quot;http://apple.com&quot; title=&quot;Apple&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;abbreviation-tag&quot;&gt;Abbreviation Tag&lt;/h3&gt;

&lt;p&gt;The abbreviation &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; stands for “Cascading Style Sheets”.&lt;/p&gt;

&lt;h3 id=&quot;cite-tag&quot;&gt;Cite Tag&lt;/h3&gt;

&lt;p&gt;“Code is poetry.” —&lt;cite&gt;Automattic&lt;/cite&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-tag&quot;&gt;Code Tag&lt;/h3&gt;

&lt;p&gt;You will learn later on in these tests that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;word-wrap: break-word;&lt;/code&gt; will be your best friend.&lt;/p&gt;

&lt;h3 id=&quot;strike-tag&quot;&gt;Strike Tag&lt;/h3&gt;

&lt;p&gt;This tag will let you &lt;strike&gt;strikeout text&lt;/strike&gt;.&lt;/p&gt;

&lt;h3 id=&quot;emphasize-tag&quot;&gt;Emphasize Tag&lt;/h3&gt;

&lt;p&gt;The emphasize tag should &lt;em&gt;italicize&lt;/em&gt; text.&lt;/p&gt;

&lt;h3 id=&quot;insert-tag&quot;&gt;Insert Tag&lt;/h3&gt;

&lt;p&gt;This tag should denote &lt;ins&gt;inserted&lt;/ins&gt; text.&lt;/p&gt;

&lt;h3 id=&quot;keyboard-tag&quot;&gt;Keyboard Tag&lt;/h3&gt;

&lt;p&gt;This scarcely known tag emulates &lt;kbd&gt;keyboard text&lt;/kbd&gt;, which is usually styled like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3 id=&quot;preformatted-tag&quot;&gt;Preformatted Tag&lt;/h3&gt;

&lt;p&gt;This tag styles large blocks of code.&lt;/p&gt;

&lt;pre&gt;
.post-title {
	margin: 0 0 5px;
	font-weight: bold;
	font-size: 38px;
	line-height: 1.2;
	and here&apos;s a line of some really, really, really, really long text, just to see how the PRE tag handles it and to find out how it overflows;
}
&lt;/pre&gt;

&lt;h3 id=&quot;quote-tag&quot;&gt;Quote Tag&lt;/h3&gt;

&lt;p&gt;&lt;q&gt;Developers, developers, developers…&lt;/q&gt; –Steve Ballmer&lt;/p&gt;

&lt;h3 id=&quot;strong-tag&quot;&gt;Strong Tag&lt;/h3&gt;

&lt;p&gt;This tag shows &lt;strong&gt;bold text&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;subscript-tag&quot;&gt;Subscript Tag&lt;/h3&gt;

&lt;p&gt;Getting our science styling on with H&lt;sub&gt;2&lt;/sub&gt;O, which should push the “2” down.&lt;/p&gt;

&lt;h3 id=&quot;superscript-tag&quot;&gt;Superscript Tag&lt;/h3&gt;

&lt;p&gt;Still sticking with science and Albert Einstein’s E = MC&lt;sup&gt;2&lt;/sup&gt;, which should lift the 2 up.&lt;/p&gt;

&lt;h3 id=&quot;variable-tag&quot;&gt;Variable Tag&lt;/h3&gt;

&lt;p&gt;This allows you to denote &lt;var&gt;variables&lt;/var&gt;.&lt;/p&gt;</content><author><name>Gianmarco Corbo</name></author><category term="Markup" /><category term="content" /><category term="css" /><category term="formatting" /><category term="html" /><category term="markup" /><summary type="html">A variety of common markup showing how the theme styles them.</summary></entry></feed>